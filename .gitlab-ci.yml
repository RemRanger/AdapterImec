image: alpine:latest

variables:
  # AUTO_DEVOPS_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  # AUTO_DEVOPS_DOMAIN: domain.example.com
  
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_ENABLED: "true"
  POSTGRES_DB: $CI_ENVIRONMENT_SLUG

  KUBE_NAMESPACE: "join-data-adapters"

  DOCKER_DRIVER: overlay2
  GIT_SUBMODULE_STRATEGY: recursive
  DOTNET_SDK_IMAGE: mcr.microsoft.com/dotnet/sdk:6.0

  #DOCKER_HOST: "tcp://localhost:2375"
  DOCKER_TLS_CERTDIR: ""

  APIDOCS_PROJECT_ID: "5538080" # GitLab Api Docs

stages:
  - quality
  - restore
  - build
  - test
  #- testing
  - integration
  - production
  
code_quality:
  stage: quality
  allow_failure: true
  timeout: 10m
  image: docker:latest  
  services:
    - docker:18.09.7-dind
  script:
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  dependencies: []
  artifacts:
    expire_in: 14d
    paths:
      - $CI_PROJECT_DIR/codeclimate.json
    reports:
      codequality:
        - $CI_PROJECT_DIR/codeclimate.json

dotnet-restore:
  stage: restore
  image: $DOTNET_SDK_IMAGE
  variables:
    NUGET_PACKAGES: $CI_PROJECT_DIR/packages
  script:
    - dotnet restore --packages $CI_PROJECT_DIR/packages
  artifacts:
    expire_in: 14d
    paths:
      - $CI_PROJECT_DIR/src/AdapterImec.Api/obj
      - $CI_PROJECT_DIR/src/AdapterImec.Application/obj
      - $CI_PROJECT_DIR/src/AdapterImec.Domain/obj
      - $CI_PROJECT_DIR/src/AdapterImec.Repository/obj
      - $CI_PROJECT_DIR/test/AdapterImec.Application.Test/obj   
  cache: []

build-tests-dotnet:
  stage: build
  image: $DOTNET_SDK_IMAGE
  variables:
    NUGET_PACKAGES: $CI_PROJECT_DIR/packages
  script:
    - export ASPNETCORE_ENVIRONMENT=$(if [[ $CI_COMMIT_REF_NAME == 'master' ]]; then echo 'Test'; elif [[ $CI_COMMIT_REF_NAME == 'staging' ]]; then echo 'Staging'; elif [[ $CI_COMMIT_REF_NAME == 'integration' ]]; then echo 'Integration'; elif [[ $CI_COMMIT_REF_NAME == 'production' ]]; then echo 'Production'; else echo 'Development'; fi;)
    - cd tests/AdapterImec.Application.Test
    - dotnet build --configuration Release --packages $CI_PROJECT_DIR/packages --output $CI_PROJECT_DIR/tests/AdapterImec.Application.Test/bin/Release/net6.0
  dependencies:
    - dotnet-restore
  artifacts:
    expire_in: 14d
    paths:
      - $CI_PROJECT_DIR/tests/AdapterImec.Application.Test/bin/Release/net6.0
  cache: []

#build-api-dotnet-test:
#  stage: build
#  image: $DOTNET_SDK_IMAGE
#  variables:
#    NUGET_PACKAGES: $CI_PROJECT_DIR/packages
#  script:
#    - export ASPNETCORE_ENVIRONMENT=Test
#    - cd src/AdapterImec.Api
#    - sed -i "s/<VersionSuffix>alpha<\/VersionSuffix>/<VersionSuffix>$CI_PIPELINE_IID<\/VersionSuffix>/g" ./AdapterImec.Api.csproj
#    - dotnet build --configuration Release --packages $CI_PROJECT_DIR/packages
#    - dotnet publish --configuration Release --no-build
#    - mv bin/Release/net6.0/publish $CI_PROJECT_DIR/src/out
#    - ls -rals $CI_PROJECT_DIR/src/out
#  dependencies:
#    - dotnet-restore
#  artifacts:
#    expire_in: 14d
#    paths:
#      - $CI_PROJECT_DIR/src/out
#  cache: []

build-api-dotnet-integration:
  stage: build
  image: $DOTNET_SDK_IMAGE
  variables:
    NUGET_PACKAGES: $CI_PROJECT_DIR/packages
  script:
    - export ASPNETCORE_ENVIRONMENT=Integration
    - cd src/AdapterImec.Api
    - sed -i "s/<VersionSuffix>alpha<\/VersionSuffix>/<VersionSuffix>$CI_PIPELINE_IID<\/VersionSuffix>/g" ./AdapterImec.Api.csproj
    - dotnet build --configuration Release --packages $CI_PROJECT_DIR/packages
    - dotnet publish --configuration Release --no-build
    - mv bin/Release/net6.0/publish $CI_PROJECT_DIR/src/out
  dependencies:
    - dotnet-restore
  artifacts:
    expire_in: 14d
    paths:
      - $CI_PROJECT_DIR/src/out
  cache: []
  only:
    refs:
      - master   

build-api-dotnet-production:
  stage: build
  image: $DOTNET_SDK_IMAGE
  variables:
    NUGET_PACKAGES: $CI_PROJECT_DIR/packages    
  script:
    - export ASPNETCORE_ENVIRONMENT=Production
    - cd src/AdapterImec.Api
    - sed -i "s/<VersionSuffix>alpha<\/VersionSuffix>/<VersionSuffix>$CI_PIPELINE_IID<\/VersionSuffix>/g" ./AdapterImec.Api.csproj
    - dotnet build --configuration Release --packages $CI_PROJECT_DIR/packages
    - dotnet publish --configuration Release --no-build
    - mv bin/Release/net6.0/publish $CI_PROJECT_DIR/src/out
  dependencies:
    - dotnet-restore
  artifacts:
    expire_in: 14d
    paths:
      - $CI_PROJECT_DIR/src/out
  cache: []
  only:
    refs:
      - master

include:
    - template: Jobs/Code-Quality.gitlab-ci.yml
    - template: Security/SAST.gitlab-ci.yml
    - template: Security/Secret-Detection.gitlab-ci.yml

test:
  stage: test
  image: $DOTNET_SDK_IMAGE
  services:
    - postgres:latest
  variables:
    NUGET_PACKAGES: $CI_PROJECT_DIR/packages
  script:
    - echo "127.0.0.1 postgres" >> /etc/hosts
    - export ASPNETCORE_ENVIRONMENT=Test
    - dotnet vstest $CI_PROJECT_DIR/tests/AdapterImec.Application.Test/bin/Release/net6.0/AdapterImec.Application.Test.dll
  dependencies:
    - build-tests-dotnet
  cache: []

# Staging deploys are disabled by default since
# continuous deployment to production is enabled by default
# If you prefer to automatically deploy to staging and
# only manually promote to production, enable this job by setting
# STAGING_ENABLED.

#testing: # previously staging
#  stage: testing
#  variables:
#    RESOURCES_REQUESTS_CPU: 25m
#    RESOURCES_REQUESTS_MEMORY: 200Mi
#    RESOURCES_LIMITS_CPU: 500m
#    RESOURCES_LIMITS_MEMORY: 300Mi
#  image: docker:stable-git
#  services:
#    - docker:18.09.7-dind
#  script:
#    - setup_docker
#    - build test
#    - check_kube_domain
#    - install_dependencies
#    - ensure_namespace
#    - create_secret
#    - create_env_vars
#    - deploy test
#  dependencies:
#     - build-api-dotnet-test
#  environment:
#    name: test # previously staging
#    url: http://$AUTO_DEVOPS_DOMAIN
#  only:
#    refs:
#      - master
#    kubernetes: active

.integration: &integration_template
  stage: integration
  variables:
    RESOURCES_REQUESTS_CPU: 25m
    RESOURCES_REQUESTS_MEMORY: 325Mi
    RESOURCES_LIMITS_CPU: 750m
    RESOURCES_LIMITS_MEMORY: 1250Mi
  image: docker:stable-git
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - build integration
    - check_kube_domain
    - install_dependencies
    - ensure_namespace
    - create_secret
    - create_env_vars
    - deploy integration
    - persist_environment_url
  dependencies:
    - build-api-dotnet-integration
  environment:
    name: integration
    url: http://$AUTO_DEVOPS_DOMAIN
  artifacts:
    paths: [environment_url.txt]

integration_manual:
  <<: *integration_template
  when: manual
  allow_failure: false
  only:
    refs:
      - master
    kubernetes: active  

.production: &production_template
  stage: production
  variables:
    RESOURCES_REQUESTS_CPU: 25m
    RESOURCES_REQUESTS_MEMORY: 325Mi
    RESOURCES_LIMITS_CPU: 950m
    RESOURCES_LIMITS_MEMORY: 1400Mi
  image: docker:stable-git
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - build production
    - check_kube_domain
    - install_dependencies
    - ensure_namespace
    - create_secret
    - create_env_vars
    - deploy production
    - persist_environment_url
  dependencies:
    - build-api-dotnet-production
  environment:
    name: production
    url: http://$AUTO_DEVOPS_DOMAIN
  artifacts:
    paths: [environment_url.txt]

production_manual:
  <<: *production_template
  when: manual
  allow_failure: false
  only:
    refs:
      - master
    kubernetes: active

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  auto_database_url=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${CI_ENVIRONMENT_SLUG}-postgres:5432/${POSTGRES_DB}
  export DATABASE_URL=${DATABASE_URL-$auto_database_url}
  export CI_APPLICATION_REPOSITORY=$AC_REGISTRY/${CI_PROJECT_NAME//_/-}/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export TILLER_NAMESPACE=$KUBE_NAMESPACE
  # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable" for Security Products
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')

  function registry_login() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to Azure Container Registry with CI credentials..."
      docker login -u "$AC_REGISTRY_USER" -p "$AC_REGISTRY_PASSWORD" "$AC_REGISTRY"
      echo ""
    fi
  }

  function get_replicas() {
    track="${1:-stable}"
    percentage="${2:-100}"

    env_track=$( echo $track | tr -s  '[:lower:]'  '[:upper:]' )
    env_slug=$( echo ${CI_ENVIRONMENT_SLUG//-/_} | tr -s  '[:lower:]'  '[:upper:]' )

    if [[ "$track" == "stable" ]] || [[ "$track" == "rollout" ]]; then
      # for stable track get number of replicas from `PRODUCTION_REPLICAS`
      eval new_replicas=\$${env_slug}_REPLICAS
      if [[ -z "$new_replicas" ]]; then
        new_replicas=$REPLICAS
      fi
    else
      # for all tracks get number of replicas from `CANARY_PRODUCTION_REPLICAS`
      eval new_replicas=\$${env_track}_${env_slug}_REPLICAS
      if [[ -z "$new_replicas" ]]; then
        eval new_replicas=\${env_track}_REPLICAS
      fi
    fi

    replicas="${new_replicas:-1}"
    replicas="$(($replicas * $percentage / 100))"

    # always return at least one replicas
    if [[ $replicas -gt 0 ]]; then
      echo "$replicas"
    else
      echo 1
    fi
  }

  # Extracts variables prefixed with K8S_SECRET_
  # and creates a Kubernetes secret.
  #
  # e.g. If we have the following environment variables:
  #   K8S_SECRET_A=value1
  #   K8S_SECRET_B=multi\ word\ value
  #
  # Then we will create a secret with the following key-value pairs:
  #   data:
  #     A: dmFsdWUxCg==
  #     B: bXVsdGkgd29yZCB2YWx1ZQo=
  function create_application_secret() {
    track="${1-stable}"
    export APPLICATION_SECRET_NAME=$(application_secret_name "$track")

    bash -c '
      function k8s_prefixed_variables() {
        env | sed -n "s/^K8S_SECRET_\(.*\)$/\1/p"
      }

      kubectl create secret \
        -n "$KUBE_NAMESPACE" generic "$APPLICATION_SECRET_NAME" \
        --from-env-file <(k8s_prefixed_variables) -o yaml --dry-run |
        kubectl replace -n "$KUBE_NAMESPACE" --force -f -
    '
  }

  # Extracts variables prefixed with K8S_
  # and adds them to the deployment (helm) template k8s
  # deployment manifest file.
  #
  function create_env_vars() {
    bash -c '
      unset IFS
      for var in $(compgen -e | grep ^K8S_* | grep -v ^K8S_SECRET_*); do
        sed -i "/env\:/a \ \ \ \ \ \ \ \ \- name: ${var#K8S_}\n \ \ \ \ \ \ \ \ \ value: \"${!var}\"" ./chart/templates/deployment.yaml
      done
    '
  }

  function deploy_name() {
    name="${CI_PROJECT_NAME//_/-}"
    track="${1-stable}"

    if [[ "$track" != "stable" ]]; then
      name="$name-$track"
    fi

    echo $name
  }

  function application_secret_name() {
    track="${1-stable}"
    name=$(deploy_name "$track")

    echo "${name}-secret"
  }

  function deploy() {
    track="${1-stable}"
    track="stable"
    percentage="${2:-100}"
    name=$(deploy_name "$track")

    replicas="1"
    service_enabled="true"
    postgres_enabled="$POSTGRES_ENABLED"

    # if track is different than stable,
    # re-use all attached resources
    if [[ "$track" != "stable" ]]; then
      service_enabled="false"
      postgres_enabled="false"
    fi

    replicas=$(get_replicas "$track" "$percentage")

    if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
      secret_name='gitlab-registry'
    else
      secret_name=''
    fi

    create_application_secret "$track"

    if [[ -n "$DB_INITIALIZE" && -z "$(helm ls --filter "^$name$")" ]]; then
      echo "Deploying first release with database initialization..."
      helm upgrade "$name" chart/ --install \
        --wait \
        --set service.enabled="$service_enabled" \
        --set releaseOverride="${CI_PROJECT_NAME//_/-}" \
        --set image.repository="$CI_APPLICATION_REPOSITORY" \
        --set image.tag="$CI_APPLICATION_TAG-$1" \
        --set image.pullPolicy=Always \
        --set image.secrets[0].name="$secret_name" \
        --set application.track="$track" \
        --set application.database_url="$DATABASE_URL" \
        --set application.secretName="$APPLICATION_SECRET_NAME" \
        --set service.url="$CI_ENVIRONMENT_URL" \
        --set service.path="$SERVICE_PATH" \
        --set service.additionalHosts="$SERVICE_ADDITIONAL_HOSTS" \
        --set replicaCount="$replicas" \
        --set application.initializeCommand="$DB_INITIALIZE" \
        --set resources.requests.cpu="$RESOURCES_REQUESTS_CPU" \
        --set resources.requests.memory="$RESOURCES_REQUESTS_MEMORY" \
        --set resources.limits.cpu="$RESOURCES_LIMITS_CPU" \
        --set resources.limits.memory="$RESOURCES_LIMITS_MEMORY" \
        --namespace="$KUBE_NAMESPACE"

      echo "Deploying second release..."
      helm upgrade "$name" chart/ --reuse-values \
        --wait \
        --set application.initializeCommand="" \
        --set application.migrateCommand="$DB_MIGRATE" \
        --namespace="$KUBE_NAMESPACE"
    else
      echo "Deploying new release..."
      helm upgrade "$name" chart/ --install \
        --wait \
        --set service.enabled="$service_enabled" \
        --set releaseOverride="${CI_PROJECT_NAME//_/-}" \
        --set image.repository="$CI_APPLICATION_REPOSITORY" \
        --set image.tag="$CI_APPLICATION_TAG-$1" \
        --set image.pullPolicy=Always \
        --set image.secrets[0].name="$secret_name" \
        --set application.track="$track" \
        --set application.database_url="$DATABASE_URL" \
        --set application.secretName="$APPLICATION_SECRET_NAME" \
        --set service.url="$CI_ENVIRONMENT_URL" \
        --set service.path="$SERVICE_PATH" \
        --set service.additionalHosts="$SERVICE_ADDITIONAL_HOSTS" \
        --set replicaCount="$replicas" \
        --set application.migrateCommand="$DB_MIGRATE" \
        --set resources.requests.cpu="$RESOURCES_REQUESTS_CPU" \
        --set resources.requests.memory="$RESOURCES_REQUESTS_MEMORY" \
        --set resources.limits.cpu="$RESOURCES_LIMITS_CPU" \
        --set resources.limits.memory="$RESOURCES_LIMITS_MEMORY" \
        --namespace="$KUBE_NAMESPACE"
    fi

    echo "Roll out new release..."
    kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/$name"
  }

  function install_dependencies() {
    apk add -U openssl curl tar gzip bash ca-certificates git
    curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    helm version

    curl -L -o /usr/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl"
    ls -Rals ./chart
    chmod +x /usr/bin/kubectl
    kubectl version --client


  }
  
  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }


  function setup_test_db() {
    if [ -z ${KUBERNETES_PORT+x} ]; then
      DB_HOST=postgres
    else
      DB_HOST=localhost
    fi
    export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:5432/${POSTGRES_DB}"
  }

  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function check_kube_domain() {
    if [ -z ${AUTO_DEVOPS_DOMAIN+x} ]; then
      echo "In order to deploy or use Review Apps, AUTO_DEVOPS_DOMAIN variable must be set"
      echo "You can do it in Auto DevOps project settings or defining a variable at group or project level"
      echo "You can also manually add it in .gitlab-ci.yml"
      false
    else
      true
    fi
  }

  function build() {
    registry_login
    
    cd src
    if [[ -f Dockerfile ]]; then
      echo "Building Dockerfile-based application..."

      docker build \
        --build-arg HTTP_PROXY="$HTTP_PROXY" \
        --build-arg http_proxy="$http_proxy" \
        --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
        --build-arg https_proxy="$https_proxy" \
        --build-arg FTP_PROXY="$FTP_PROXY" \
        --build-arg ftp_proxy="$ftp_proxy" \
        --build-arg NO_PROXY="$NO_PROXY" \
        --build-arg no_proxy="$no_proxy" \
        -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$1" .
    fi

    echo "Pushing to Azure Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$1"
    echo ""
    cd ..
  }

  function create_secret() {
    echo "Create secret..."
    if [[ "$CI_PROJECT_VISIBILITY" == "public" ]]; then
      return
    fi

    kubectl create secret -n "$KUBE_NAMESPACE" \
      docker-registry gitlab-registry \
      --docker-server="$CI_REGISTRY" \
      --docker-username="${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" \
      --docker-password="${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
  }

  function persist_environment_url() {
      echo $CI_ENVIRONMENT_URL > environment_url.txt
  }
  
  function run_api_docs_integration() {
    curl --request GET --url https://gitlab.com/api/v4/projects/$APIDOCS_PROJECT_ID/jobs --header "private-token: $ACCESS_TOKEN_GITLAB" -o result.json 
    JOB_ID=$(jq '[. |= sort_by(.created_at) | reverse[] | select(.stage=="integration" and .status=="manual")] | .[0].id' result.json)
    echo $JOB_ID
    curl --request POST --url https://gitlab.com/api/v4/projects/$APIDOCS_PROJECT_ID/jobs/$JOB_ID/play --header "private-token: $ACCESS_TOKEN_GITLAB"
  }
  
  function run_api_docs_production() {
    curl --request GET --url https://gitlab.com/api/v4/projects/$APIDOCS_PROJECT_ID/jobs --header "private-token: $ACCESS_TOKEN_GITLAB" -o result.json 
    JOB_ID=$(jq '[. |= sort_by(.created_at) | reverse[] | select(.stage=="production" and .status=="manual")] | .[0].id' result.json)
    echo $JOB_ID
    curl --request POST --url https://gitlab.com/api/v4/projects/$APIDOCS_PROJECT_ID/jobs/$JOB_ID/play --header "private-token: $ACCESS_TOKEN_GITLAB"
  }

before_script:
  - *auto_devops
